================================================================================
           FICHIERS GENERES - BIBLIOTHEQUE MUSICALE IMPRO
================================================================================

Date: 2025-10-03
Projet: Music Impro Chooser
Source: C:\Users\JulienFernandez\OneDrive\Zic impro

================================================================================
                      FICHIERS PRINCIPAUX
================================================================================

1. music_library.json (713 KB)
   -----------------------------------------------------------------------
   DESCRIPTION:
   Bibliotheque complete avec les 777 pistes audio mappees.

   CONTENU:
   - Metadonnees completes pour chaque piste
   - Tags (genre, mood, energie, tempo)
   - Contexte impro (scenarios, emotions, contraintes)
   - Points de repere temporels (cues)
   - Informations techniques

   UTILISATION:
   - Fichier principal a importer dans l'application
   - Peut etre charge en JavaScript/TypeScript/Python
   - Structure JSON standard

   TAILLE: 26,870 lignes


2. music_examples.json (40 KB)
   -----------------------------------------------------------------------
   DESCRIPTION:
   Exemples de pistes organises par categorie d'utilisation.

   CONTENU:
   - high_energy_rock: Rock energique
   - calm_ambient: Musiques calmes
   - sound_effects: Bruitages
   - tv_themes: Generiques TV
   - match_impro: Musiques pour matchs
   - western: Musiques western
   - horror: Ambiances d'horreur
   - romance: Musiques romantiques

   UTILISATION:
   - Fichier de demonstration
   - Tests d'integration
   - Exemples pour documentation


3. music_library_stats.json (11 KB)
   -----------------------------------------------------------------------
   DESCRIPTION:
   Statistiques detaillees de la bibliotheque.

   CONTENU:
   - Compteurs par genre, mood, energie, tempo
   - Liste des scenarios disponibles
   - Top 10 des dossiers
   - Liste complete des artistes (357 artistes)
   - Statistiques de duree

   UTILISATION:
   - Dashboard de statistiques
   - Analyse de la collection
   - Recherche d'artistes


================================================================================
                      DOCUMENTATION
================================================================================

4. BIBLIOTHEQUE_MUSICALE.md (6.6 KB)
   -----------------------------------------------------------------------
   DESCRIPTION:
   Documentation complete en Markdown.

   CONTENU:
   - Vue d'ensemble de la bibliotheque
   - Statistiques detaillees
   - Structure des donnees JSON
   - Exemples d'utilisation (JavaScript, Python)
   - Organisation des dossiers sources
   - Cas d'usage pour l'impro

   UTILISATION:
   - Guide de reference principal
   - Documentation technique
   - Lisible sur GitHub


5. MUSIC_LIBRARY_README.txt (14 KB)
   -----------------------------------------------------------------------
   DESCRIPTION:
   Documentation complete en format texte brut.

   CONTENU:
   - Resume complet de la bibliotheque
   - Repartition detaillee du contenu
   - Exemples de code
   - Liste d'exemples de pistes
   - Guide d'utilisation complet
   - Conseils pour regenerer

   UTILISATION:
   - Documentation offline
   - Reference rapide
   - Format universel (pas de mise en forme)


6. FICHIERS_GENERES.txt (ce fichier)
   -----------------------------------------------------------------------
   DESCRIPTION:
   Index de tous les fichiers generes avec descriptions.

   CONTENU:
   - Liste complete des fichiers
   - Description de chaque fichier
   - Utilisation recommandee

   UTILISATION:
   - Point d'entree pour decouvrir le projet
   - Reference rapide


================================================================================
                      SCRIPTS
================================================================================

7. generate_music_library.py (14 KB)
   -----------------------------------------------------------------------
   DESCRIPTION:
   Script Python principal pour generer la bibliotheque.

   FONCTIONNALITES:
   - Scan recursif des fichiers audio
   - Extraction artiste/titre depuis le nom de fichier
   - Detection intelligente des genres musicaux
   - Analyse des moods/ambiances
   - Calcul automatique energie et tempo
   - Suggestions de scenarios d'impro
   - Generation d'IDs uniques
   - Estimation des durees

   USAGE:
   python generate_music_library.py

   FORMATS SUPPORTES:
   .mp3, .wav, .m4a, .flac, .aac, .ogg, .wma

   SORTIE:
   music_library.json

   NOTES:
   - Regenere completement la bibliotheque
   - Ecrase le fichier existant
   - Affiche des statistiques a la fin


8. library_report.py (4.9 KB)
   -----------------------------------------------------------------------
   DESCRIPTION:
   Script Python pour generer des rapports statistiques.

   FONCTIONNALITES:
   - Analyse complete de la bibliotheque
   - Statistiques par genre, mood, energie
   - Distribution des scenarios
   - Exemples de pistes par categorie
   - Statistiques de duree

   USAGE:
   python library_report.py

   SORTIE:
   Affichage dans le terminal (peut etre redirige vers un fichier)

   NOTES:
   - Necessite music_library.json
   - Peut generer des erreurs d'encodage avec emojis


================================================================================
                      RESUME DES CONTENUS
================================================================================

DONNEES
-------
Total de pistes    : 777
Artistes uniques   : 357
Duree totale       : 31 heures
Genres musicaux    : 8
Ambiances/moods    : 23
Scenarios impro    : 30
Bruitages          : 202
Musiques           : 575

FORMATS
-------
JSON principal     : music_library.json
JSON exemples      : music_examples.json
JSON stats         : music_library_stats.json
Markdown           : BIBLIOTHEQUE_MUSICALE.md
Texte brut         : MUSIC_LIBRARY_README.txt
                     FICHIERS_GENERES.txt

SCRIPTS
-------
Generation         : generate_music_library.py
Rapport            : library_report.py


================================================================================
                      UTILISATION RECOMMANDEE
================================================================================

POUR DEVELOPPER UNE APPLICATION
--------------------------------
1. Importer music_library.json comme source de donnees principale
2. Utiliser music_examples.json pour les tests
3. Charger music_library_stats.json pour les statistiques/dashboard
4. Consulter BIBLIOTHEQUE_MUSICALE.md pour la documentation API

POUR EXPLORER LA BIBLIOTHEQUE
------------------------------
1. Lire MUSIC_LIBRARY_README.txt pour une vue d'ensemble
2. Consulter music_library_stats.json pour les statistiques
3. Explorer music_examples.json pour des exemples concrets
4. Parcourir music_library.json pour les details

POUR REGENERER LA BIBLIOTHEQUE
-------------------------------
1. Ajouter/supprimer des fichiers dans le dossier source
2. Executer: python generate_music_library.py
3. Verifier les statistiques affichees
4. Consulter le nouveau music_library.json

POUR ANALYSER LA COLLECTION
----------------------------
1. Executer: python library_report.py
2. Consulter music_library_stats.json
3. Comparer avec MUSIC_LIBRARY_README.txt


================================================================================
                      INTEGRATION DANS UNE APPLICATION
================================================================================

JAVASCRIPT/TYPESCRIPT
---------------------
// Methode 1: Import statique
import library from './music_library.json';

// Methode 2: Fetch dynamique
const response = await fetch('music_library.json');
const library = await response.json();

// Utilisation
const rockTracks = library.tracks.filter(t =>
  t.tags.genre.includes('rock')
);

REACT
-----
import { useState, useEffect } from 'react';

function MusicLibrary() {
  const [library, setLibrary] = useState(null);

  useEffect(() => {
    fetch('music_library.json')
      .then(res => res.json())
      .then(data => setLibrary(data));
  }, []);

  if (!library) return <div>Loading...</div>;

  return (
    <div>
      <h1>{library.total_tracks} pistes</h1>
      {/* ... */}
    </div>
  );
}

PYTHON
------
import json

with open('music_library.json', 'r', encoding='utf-8') as f:
    library = json.load(f)

# Filtrage
rock = [t for t in library['tracks']
        if 'rock' in t['tags']['genre']]

print(f"Pistes rock: {len(rock)}")

NODE.JS
-------
const library = require('./music_library.json');

// Express API
app.get('/api/tracks', (req, res) => {
  res.json(library.tracks);
});

app.get('/api/tracks/rock', (req, res) => {
  const rock = library.tracks.filter(t =>
    t.tags.genre.includes('rock')
  );
  res.json(rock);
});


================================================================================
                      EXEMPLES DE REQUETES
================================================================================

RECHERCHE PAR ENERGIE
----------------------
JavaScript:
  library.tracks.filter(t => t.tags.energy >= 8)

Python:
  [t for t in library['tracks'] if t['tags']['energy'] >= 8]

RECHERCHE PAR MOOD
------------------
JavaScript:
  library.tracks.filter(t => t.tags.mood.includes('calme'))

Python:
  [t for t in library['tracks'] if 'calme' in t['tags']['mood']]

RECHERCHE PAR SCENARIO
----------------------
JavaScript:
  library.tracks.filter(t =>
    t.impro_context.scenarios.includes('match-impro')
  )

Python:
  [t for t in library['tracks']
   if 'match-impro' in t['impro_context']['scenarios']]

RECHERCHE PAR ARTISTE
---------------------
JavaScript:
  library.tracks.filter(t => t.artist === 'Queen')

Python:
  [t for t in library['tracks'] if t['artist'] == 'Queen']

RECHERCHE COMBINEE
------------------
JavaScript:
  library.tracks.filter(t =>
    t.tags.genre.includes('rock') &&
    t.tags.energy >= 7 &&
    t.tags.tempo === 'fast'
  )

Python:
  [t for t in library['tracks']
   if 'rock' in t['tags']['genre']
   and t['tags']['energy'] >= 7
   and t['tags']['tempo'] == 'fast']


================================================================================
                      MAINTENANCE
================================================================================

AJOUTER DES FICHIERS
---------------------
1. Copier les nouveaux fichiers audio dans le dossier source
2. Executer: python generate_music_library.py
3. Verifier que le nombre total de pistes a augmente

SUPPRIMER DES FICHIERS
-----------------------
1. Supprimer les fichiers du dossier source
2. Executer: python generate_music_library.py
3. Verifier que le nombre total de pistes a diminue

MODIFIER LES METADONNEES
-------------------------
1. Editer generate_music_library.py
2. Modifier les fonctions de detection (determine_tags, etc.)
3. Executer: python generate_music_library.py
4. Verifier les nouveaux tags generes

CORRIGER UN FICHIER SPECIFIQUE
-------------------------------
Option 1 (automatique):
  - Renommer le fichier source avec le bon format
  - Regenerer la bibliotheque

Option 2 (manuel):
  - Editer directement music_library.json
  - Modifier les champs necessaires
  - Attention: sera ecrase a la prochaine regeneration


================================================================================
                      PROBLEMES CONNUS
================================================================================

ENCODAGE
--------
- Certains fichiers contiennent des emojis dans le nom
- Peut causer des erreurs d'affichage dans le terminal Windows
- Solution: Les fichiers JSON sont correctement encodes en UTF-8

CHEMINS WINDOWS
---------------
- Les chemins contiennent des backslashes doubles (\\)
- C'est normal pour l'echappement JSON
- Utilisables directement en JavaScript/Python

DUREES ESTIMEES
---------------
- Les durees sont estimees, pas extraites du fichier audio
- Pour avoir les durees reelles, il faudrait:
  - Utiliser une librairie audio (mutagen, ffprobe)
  - Lire les metadonnees ID3


================================================================================
                      EVOLUTION FUTURE
================================================================================

COURT TERME
-----------
- Extraction des durees reelles via mutagen ou ffprobe
- Detection du BPM pour chaque piste
- Extraction des tags ID3 officiels

MOYEN TERME
-----------
- Interface web de recherche
- Playlist builder
- Export en format M3U/PLS
- Systeme de favoris

LONG TERME
----------
- Analyse audio par IA
- Recommendations intelligentes
- Detection automatique des emotions
- Similarite audio


================================================================================
                      CONTACT
================================================================================

Projet cree pour: Julien Fernandez
Genere par: Claude Code
Date: 2025-10-03

Pour toute question:
- Consulter la documentation
- Modifier les scripts Python
- Explorer les fichiers JSON

================================================================================
                      FIN DU DOCUMENT
================================================================================
